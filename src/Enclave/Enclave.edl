enclave {
    from "mbedtls-SGX/lib/mbedtls_sgx.edl" import *;
    from "EnclaveTest.edl" import *;
    
    include "sgx_report.h"
    include "time.h"
    include "stddef.h"
    include "sgx_tseal.h"

    trusted {
        public int identity_token(
                [user_check] unsigned char* data, size_t data_len,
                [user_check] unsigned char* dataset, size_t dataset_len,
                [user_check] unsigned char* newdata, [out] size_t* newdata_len,
                [user_check] unsigned char* signature);
        
        public int handle_request(
                   int nonce,
                   uint64_t id, uint64_t type,
                   [user_check] const uint8_t* data, size_t data_len,
                   [user_check] uint8_t* tx, [out] size_t* len);

        public int ecall_create_report ([in] sgx_target_info_t* quote_enc_info, [out] sgx_report_t* report);
        public int ecall_get_mr_enclave([out] unsigned char mr_enclave[32]);

        public int ecall_time_calibrate (time_t wall_clock, [out] uint8_t wtc_rsv[65]);

        public int register_exception_handlers();

        public int ecdsa_keygen_seal(
                    [user_check] unsigned char *o_sealed,
                    [in,out] size_t *olen,
                    [user_check] unsigned char *o_pubkey,
                    [user_check] unsigned char *o_address);

        public int ecdsa_keygen_unseal(
                    [in,size=secret_len] const sgx_sealed_data_t *secret,
                    size_t secret_len,
                    [user_check] unsigned char* pubkey,
                    [user_check] unsigned char *address);

        public int tc_provision_ecdsa_key(
                    [in,size=secret_len] const sgx_sealed_data_t *secret,
                    size_t secret_len);

        public int tc_provision_hybrid_key(
                    [in,size=secret_len] const sgx_sealed_data_t *secret,
                    size_t secret_len);

        public int tc_get_address(
                    [user_check] unsigned char* pubkey,
                    [user_check] unsigned char *address);

        public int tc_get_hybrid_pubkey(
                    [user_check] uint8_t pubkey[65]);

        public void init_enclave_kv_store([in,string] const char* contract_address);
        public void set_enclave_kv([user_check] const char* key, [user_check] const char* value);
    };

    untrusted {
        void ocall_logging(int level, [in,string] const char* file, int line, [in,string] const char* msg);
    };
};
